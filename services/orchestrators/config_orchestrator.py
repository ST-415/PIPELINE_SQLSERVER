"""
Configuration Service ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö PIPELINE_SQLSERVER

Orchestrator service ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ï‡πà‡∏≤‡∏á‡πÜ ‡∏Ç‡∏≠‡∏á‡πÅ‡∏≠‡∏õ‡∏û‡∏•‡∏¥‡πÄ‡∏Ñ‡∏ä‡∏±‡∏ô
‡∏õ‡∏£‡∏∞‡∏™‡∏≤‡∏ô‡∏á‡∏≤‡∏ô‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á SettingsManager ‡πÅ‡∏•‡∏∞ configuration-related services
"""

import logging
from typing import Dict, Any, Optional, Tuple, List
from config.settings import SettingsManager, DatabaseSettings, AppSettings
from services.utilities.preload_service import PreloadService


class ConfigOrchestrator:
    """
    Configuration Orchestrator Service
    
    ‡∏ó‡∏≥‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô orchestrator ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£:
    - Settings management
    - Configuration loading/saving
    - Preload services
    - Configuration validation
    """
    
    def __init__(self, log_callback=None):
        """
        ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Configuration Service
        
        Args:
            log_callback: ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á log
        """
        self.log_callback = log_callback if log_callback else (lambda msg: None)
        self.logger = logging.getLogger(__name__)
        
        # Initialize modular services
        self.settings_manager = SettingsManager()
        self.preload_service = PreloadService()
        
        self.logger.info("ConfigService initialized")
    
    def initialize_application_config(self, progress_callback=None) -> Tuple[bool, str, Dict[str, Any]]:
        """
        ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÅ‡∏≠‡∏õ‡∏û‡∏•‡∏¥‡πÄ‡∏Ñ‡∏ä‡∏±‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        
        Args:
            progress_callback: ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤
            
        Returns:
            Tuple[bool, str, Dict]: (success, message, config_data)
        """
        try:
            self.log_callback("üîß Initializing application configuration...")
            
            # ‡πÇ‡∏´‡∏•‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
            if progress_callback:
                progress_callback("Loading basic settings...")
            
            app_settings = self.settings_manager.get_app_settings()
            db_settings = self.settings_manager.get_database_settings()
            
            # ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πà‡∏ß‡∏á‡∏´‡∏ô‡πâ‡∏≤
            if progress_callback:
                progress_callback("Preloading application data...")
            
            preload_success, preload_message, preload_data = self.preload_service.preload_file_settings(
                progress_callback=progress_callback
            )
            
            # ‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
            config_data = {
                'app_settings': app_settings,
                'database_settings': db_settings,
                'preload_data': preload_data if preload_success else {},
                'preload_success': preload_success,
                'preload_message': preload_message
            }
            
            if progress_callback:
                progress_callback("Configuration initialization completed")
            
            self.log_callback("‚úÖ Application configuration initialized successfully")
            return True, "Configuration initialized successfully", config_data
            
        except Exception as e:
            error_msg = f"Failed to initialize configuration: {str(e)}"
            self.logger.error(error_msg)
            self.log_callback(f"‚ùå {error_msg}")
            return False, error_msg, {}
    
    def update_database_config(self, **config_params) -> Tuple[bool, str]:
        """
        ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        
        Args:
            **config_params: ‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
            
        Returns:
            Tuple[bool, str]: (success, message)
        """
        try:
            self.log_callback("üîß Updating database configuration...")
            
            # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ú‡πà‡∏≤‡∏ô settings manager
            success, message = self.settings_manager.update_database_settings(**config_params)
            
            if success:
                self.log_callback("‚úÖ Database configuration updated successfully")
            else:
                self.log_callback(f"‚ùå Failed to update database configuration: {message}")
            
            return success, message
            
        except Exception as e:
            error_msg = f"Error updating database configuration: {str(e)}"
            self.logger.error(error_msg)
            self.log_callback(f"‚ùå {error_msg}")
            return False, error_msg
    
    def update_app_settings(self, **settings_params) -> Tuple[bool, str]:
        """
        ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÅ‡∏≠‡∏õ‡∏û‡∏•‡∏¥‡πÄ‡∏Ñ‡∏ä‡∏±‡∏ô
        
        Args:
            **settings_params: ‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÅ‡∏≠‡∏õ‡∏û‡∏•‡∏¥‡πÄ‡∏Ñ‡∏ä‡∏±‡∏ô
            
        Returns:
            Tuple[bool, str]: (success, message)
        """
        try:
            self.log_callback("üîß Updating application settings...")
            
            # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ú‡πà‡∏≤‡∏ô settings manager
            success, message = self.settings_manager.update_app_settings(**settings_params)
            
            if success:
                self.log_callback("‚úÖ Application settings updated successfully")
            else:
                self.log_callback(f"‚ùå Failed to update application settings: {message}")
            
            return success, message
            
        except Exception as e:
            error_msg = f"Error updating application settings: {str(e)}"
            self.logger.error(error_msg)
            self.log_callback(f"‚ùå {error_msg}")
            return False, error_msg
    
    def get_complete_config(self) -> Dict[str, Any]:
        """
        ‡∏î‡∏∂‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ç‡∏≠‡∏á‡πÅ‡∏≠‡∏õ‡∏û‡∏•‡∏¥‡πÄ‡∏Ñ‡∏ä‡∏±‡∏ô
        
        Returns:
            Dict: ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        """
        try:
            return {
                'app_settings': self.settings_manager.get_app_settings(),
                'database_settings': self.settings_manager.get_database_settings(),
                'cached_preload_data': self.preload_service.get_cached_data()
            }
        except Exception as e:
            self.logger.error(f"Error getting complete config: {e}")
            return {}
    
    def validate_config(self) -> Tuple[bool, str, List[str]]:
        """
        ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤
        
        Returns:
            Tuple[bool, str, List[str]]: (is_valid, message, issues)
        """
        try:
            self.log_callback("üîç Validating configuration...")
            
            issues = []
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
            db_settings = self.settings_manager.get_database_settings()
            if not db_settings.server:
                issues.append("Database server not configured")
            if not db_settings.database:
                issues.append("Database name not configured")
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÅ‡∏≠‡∏õ‡∏û‡∏•‡∏¥‡πÄ‡∏Ñ‡∏ä‡∏±‡∏ô
            app_settings = self.settings_manager.get_app_settings()
            if not app_settings.last_search_path:
                issues.append("Search path not configured")
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö preload data
            preload_data = self.preload_service.get_cached_data()
            if not preload_data:
                issues.append("Preload data not available")
            
            is_valid = len(issues) == 0
            
            if is_valid:
                self.log_callback("‚úÖ Configuration validation passed")
                return True, "Configuration is valid", []
            else:
                message = f"Configuration has {len(issues)} issues"
                self.log_callback(f"‚ö†Ô∏è {message}: {', '.join(issues)}")
                return False, message, issues
            
        except Exception as e:
            error_msg = f"Error validating configuration: {str(e)}"
            self.logger.error(error_msg)
            self.log_callback(f"‚ùå {error_msg}")
            return False, error_msg, [error_msg]
    
    def reset_config(self) -> Tuple[bool, str]:
        """
        ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
        
        Returns:
            Tuple[bool, str]: (success, message)
        """
        try:
            self.log_callback("üîÑ Resetting configuration to defaults...")
            
            # ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï settings manager
            success, message = self.settings_manager.reset_to_defaults()
            
            if success:
                # ‡∏•‡πâ‡∏≤‡∏á preload cache
                self.preload_service.clear_cache()
                self.log_callback("‚úÖ Configuration reset to defaults")
            else:
                self.log_callback(f"‚ùå Failed to reset configuration: {message}")
            
            return success, message
            
        except Exception as e:
            error_msg = f"Error resetting configuration: {str(e)}"
            self.logger.error(error_msg)
            self.log_callback(f"‚ùå {error_msg}")
            return False, error_msg
    
    def export_config(self, file_path: str) -> Tuple[bool, str]:
        """
        ‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏ü‡∏•‡πå
        
        Args:
            file_path: ‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å
            
        Returns:
            Tuple[bool, str]: (success, message)
        """
        try:
            self.log_callback(f"üì§ Exporting configuration to {file_path}...")
            
            # ‡∏î‡∏∂‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
            config_data = self.get_complete_config()
            
            # ‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏ú‡πà‡∏≤‡∏ô settings manager
            success, message = self.settings_manager.export_settings(file_path, config_data)
            
            if success:
                self.log_callback("‚úÖ Configuration exported successfully")
            else:
                self.log_callback(f"‚ùå Failed to export configuration: {message}")
            
            return success, message
            
        except Exception as e:
            error_msg = f"Error exporting configuration: {str(e)}"
            self.logger.error(error_msg)
            self.log_callback(f"‚ùå {error_msg}")
            return False, error_msg
    
    def import_config(self, file_path: str) -> Tuple[bool, str]:
        """
        ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå
        
        Args:
            file_path: ‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤
            
        Returns:
            Tuple[bool, str]: (success, message)
        """
        try:
            self.log_callback(f"üì• Importing configuration from {file_path}...")
            
            # ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡∏ú‡πà‡∏≤‡∏ô settings manager
            success, message = self.settings_manager.import_settings(file_path)
            
            if success:
                # ‡∏•‡πâ‡∏≤‡∏á preload cache ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÇ‡∏´‡∏•‡∏î‡πÉ‡∏´‡∏°‡πà
                self.preload_service.clear_cache()
                self.log_callback("‚úÖ Configuration imported successfully")
            else:
                self.log_callback(f"‚ùå Failed to import configuration: {message}")
            
            return success, message
            
        except Exception as e:
            error_msg = f"Error importing configuration: {str(e)}"
            self.logger.error(error_msg)
            self.log_callback(f"‚ùå {error_msg}")
            return False, error_msg
    
    # Convenience methods for backward compatibility
    def get_database_settings(self) -> DatabaseSettings:
        """‡∏î‡∏∂‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"""
        return self.settings_manager.get_database_settings()
    
    def get_app_settings(self) -> AppSettings:
        """‡∏î‡∏∂‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÅ‡∏≠‡∏õ‡∏û‡∏•‡∏¥‡πÄ‡∏Ñ‡∏ä‡∏±‡∏ô"""
        return self.settings_manager.get_app_settings()
    
    def save_last_path(self, path: str) -> Tuple[bool, str]:
        """‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å path ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î"""
        return self.settings_manager.save_last_path(path)